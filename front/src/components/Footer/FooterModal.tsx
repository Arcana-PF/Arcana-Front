"use client";

import { useState, useEffect } from "react";
import {
  X,
  Lock,
  HelpCircle,
  FileText,
  Truck,
} from "lucide-react";

const sections = [
  {
    label: "Privacidad",
    icon: <Lock className="w-4 h-4 mr-1 text-purple-600" />,
    content: `En Arcana, tu privacidad es una prioridad. Tus datos est√°n protegidos mediante cifrado seguro y nunca compartimos tu informaci√≥n personal con terceros. Utilizamos cookies solo para mejorar tu experiencia de navegaci√≥n.`,
  },
  {
    label: "Preguntas Frecuentes",
    icon: <HelpCircle className="w-4 h-4 mr-1 text-purple-600" />,
    content: `¬øHacen env√≠os internacionales? S√≠, a toda Latinoam√©rica.\n\n¬øPuedo devolver un producto? Ten√©s hasta 30 d√≠as desde la entrega. \n\n¬øLos productos est√°n consagrados? Algunos s√≠, lo aclaramos en la descripci√≥n.\n\n¬øPuedo pagar en cuotas? S√≠, aceptamos cuotas seg√∫n promociones bancarias.`,
  },
  {
    label: "T√©rminos de servicio",
    icon: <FileText className="w-4 h-4 mr-1 text-purple-600" />,
    content: `El uso del sitio implica la aceptaci√≥n de nuestros t√©rminos. Nuestros productos son para uso personal o espiritual. Nos reservamos el derecho de modificar las condiciones sin previo aviso.`,
  },
  {
    label: "Env√≠os y devoluciones",
    icon: <Truck className="w-4 h-4 mr-1 text-purple-600" />,
    content: `üì¶ Env√≠os: Los pedidos se procesan en 24-48hs h√°biles. Ofrecemos seguimiento en tiempo real.\n\nüîÑ Devoluciones: Aceptadas dentro de los 30 d√≠as. El producto debe estar en perfectas condiciones y con su embalaje original.`,
  },
];


export default function FooterModal({
  isOpen,
  onClose,
  initialTab = 0,
}: {
  isOpen: boolean;
  onClose: () => void;
  initialTab?: number;
}) {
  const [activeTab, setActiveTab] = useState(initialTab);

  
  useEffect(() => {
    if (isOpen) setActiveTab(initialTab);
  }, [isOpen, initialTab]);

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 bg-black/60 backdrop-blur-sm flex items-center justify-center p-4">
      <div className="bg-white text-gray-800 w-full max-w-3xl rounded-xl shadow-2xl border border-purple-300 animate-fadeIn overflow-hidden">
        {/* Header */}
        <div className="flex justify-between items-center px-6 py-4 bg-gradient-to-r from-purple-900 to-purple-800 text-white">
          <h2 className="text-lg md:text-xl font-semibold flex items-center gap-2">
            {sections[activeTab].icon}
            {sections[activeTab].label}
          </h2>
          <button
            onClick={onClose}
            className="hover:text-red-300 transition"
            aria-label="Cerrar"
          >
            <X className="w-5 h-5" />
          </button>
        </div>

        {/* Tabs */}
        <div className="flex flex-wrap border-b border-gray-200 bg-gray-100 text-sm font-medium text-gray-600">
          {sections.map((section, index) => (
            <button
              key={index}
              onClick={() => setActiveTab(index)}
              className={`px-4 py-2 flex-1 sm:flex-none transition-all ${
                activeTab === index
                  ? "bg-white text-purple-800 border-b-2 border-purple-800"
                  : "hover:text-purple-600"
              }`}
            >
              {section.label}
            </button>
          ))}
        </div>

        {/* Content */}
        <div className="p-6 max-h-[60vh] overflow-y-auto whitespace-pre-line text-sm sm:text-base leading-relaxed text-gray-700">
          {sections[activeTab].content}
        </div>
      </div>
    </div>
  );
}
